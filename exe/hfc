#!/usr/bin/env ruby
# frozen_string_literal: true

require 'hfc'
require 'optparse'

$FACTS = {}
$HFC = HFC.new
OptionParser.new do |opts|
  opts.on('-n name', '--name name', '--facts-by-name name', 'lookup facts by name') { |name| $NAME = name }
  opts.on('-l', '-c', '--lookup', '--config', 'lookup config | generate config') { $LOOKUP = true }
  opts.on('-p path', '--path path', 'use the following base path(s) instead of defaults. Splitted by ,') { |base| $HFC = HFC.new(lookup_paths: base.split(',')) }
  opts.on('--fact domain=dev') { |fact| key, value = fact.split(/:|=/).map(&:strip); $FACTS ||= {}; $FACTS[key] = value }
  opts.on('--facts "{}"') { |facts| $FACTS ||= {}; $FACTS.merge!(eval(facts)) }
  opts.on('-v', '--verbose', 'Run verbosely') { $VERBOSE = true }
  opts.on('-d', '--debug', 'Run debug') { $DEBUG = true }
end.parse!

puts $FACTS = $HFC.facts_by_name($NAME) if $NAME
puts $HFC.lookup(facts: $FACTS).to_s if $LOOKUP
